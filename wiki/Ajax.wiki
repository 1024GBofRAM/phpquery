Ajax, standing for _Asynchronous JavaScript and XML_ is combination of HTTP Client and XML parser which doesn't lock program's thread (doing request in asynchronous way).

*phpQuery* also offers such functionality, making use of solid quality [http://framework.zend.com/manual/en/zend.http.html Zend_Http_Client]. Unfortunately requests aren't asynchronous, but nothing is impossible. For today, instead of [http://en.wikipedia.org/wiki/XMLHttpRequest XMLHttpRequest] you always get Zend_Http_Client instance. API unification is [http://code.google.com/p/phpquery/issues/detail?id=44 planned].

Implemented are following jQuery methods. 
====Ajax Requests====
 * *`phpQuery::ajax($options)`* Load a remote page using an HTTP request.
 * *`load($url, $data, $callback)`* Load HTML from a remote file and inject it into the DOM.
 * *`phpQuery::get($url, $data, $callback)`* Load a remote page using an HTTP GET request.
 * *`phpQuery::getJSON($url, $data, $callback)`* Load JSON data using an HTTP GET request.
 * *`phpQuery::post($url, $data, $callback, $type)`* Load a remote page using an HTTP POST request.
====Ajax Events====
 * *`ajaxComplete($callback)`* Attach a function to be executed whenever an AJAX request completes. This is an Ajax Event.
 * *`ajaxError($callback)`* Attach a function to be executed whenever an AJAX request fails. This is an Ajax Event.
 * *`ajaxSend($callback)`* Attach a function to be executed before an AJAX request is sent. This is an Ajax Event.
 * *`ajaxStart($callback)`* Attach a function to be executed whenever an AJAX request begins and there is none already active. This is an Ajax Event.
 * *`ajaxStop($callback)`* Attach a function to be executed whenever all AJAX requests have ended. This is an Ajax Event.
 * *`ajaxSuccess($callback)`* Attach a function to be executed whenever an AJAX request completes successfully. This is an Ajax Event.
====Misc====
 * *`phpQuery::ajaxSetup($options)`* Setup global settings for AJAX requests.
 * *`serialize()`* Serializes a set of input elements into a string of data. This will serialize all given elements.
 * *`serializeArray()`* Serializes all forms and form elements (like the .serialize() method) but returns a JSON data structure for you to work with.
====Options====
 * *`async`* `Boolean`
 * *`beforeSend`* `Function`
 * *`cache`* `Boolean`
 * *`complete`* `Function`
 * *`contentType`* `String`
 * *`data`* `Object, String`
 * *`dataType`* `String`
 * *`error`* `Function`
 * *`global`* `Boolean`
 * *`ifModified`* `Boolean`
 * *`jsonp`* `String`
 * *`password`* `String`
 * *`processData`* `Boolean`
 * *`success`* `Function`
 * *`timeout`* `Number`
 * *`type`* `String`
 * *`url`* `String`
 * *`username`* `String`

Read more at [http://docs.jquery.com/Ajax Ajax section] on [http://docs.jquery.com/ jQuery Documentation Site].